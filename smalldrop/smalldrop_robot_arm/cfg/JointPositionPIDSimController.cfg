#!/usr/bin/env python3

# Copyright (c) 2019-2020 Ricardo Tonet
# Use of this source code is governed by the MIT license, see LICENSE
PACKAGE = "smalldrop_robot_arm"

from dynamic_reconfigure.parameter_generator_catkin import *

# Instantiate a parameter generator
gen = ParameterGenerator()

# gen.add Parameters:
#   name - a string which specifies the name under which this parameter should be stored
#   paramtype - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t
#   level - A bitmask which will later be passed to the dynamic reconfigure callback. When the callback is called all of the level values for parameters that have been changed are ORed together and the resulting value is passed to the callback.
#   description - string which describes the parameter
#   default - specifies the default value
#   min - specifies the min value (optional and does not apply to strings and bools)
#   max - specifies the max value (optional and does not apply to strings and bools) 

# gen.add(name, paramtype, level, description, default, min, max)

# Joint Proportional gains
gen.add("joint1_p", double_t, 0, "Proportional gain for  joint 1", 10000, 0, 100000)
gen.add("joint2_p", double_t, 0, "Proportional gain for  joint 2", 10000, 0, 100000)
gen.add("joint3_p", double_t, 0, "Proportional gain for  joint 3", 10000, 0, 100000)
gen.add("joint4_p", double_t, 0, "Proportional gain for  joint 4", 10000, 0, 100000)
gen.add("joint5_p", double_t, 0, "Proportional gain for  joint 5", 10000, 0, 100000)
gen.add("joint6_p", double_t, 0, "Proportional gain for  joint 6", 5000, 0, 100000)
gen.add("joint7_p", double_t, 0, "Proportional gain for  joint 7", 2000, 0, 100000)

# Joint Derivative gains
gen.add("joint1_d", double_t, 0, "Derivative gain for  joint 1", 50, 0, 100)
gen.add("joint2_d", double_t, 0, "Derivative gain for  joint 2", 50, 0, 100)
gen.add("joint3_d", double_t, 0, "Derivative gain for  joint 3", 50, 0, 100)
gen.add("joint4_d", double_t, 0, "Derivative gain for  joint 4", 50, 0, 100)
gen.add("joint5_d", double_t, 0, "Derivative gain for  joint 5", 50, 0, 100)
gen.add("joint6_d", double_t, 0, "Derivative gain for  joint 6", 50, 0, 100)
gen.add("joint7_d", double_t, 0, "Derivative gain for  joint 7", 20, 0, 100)

# Joint Integrative gains
gen.add("joint1_i", double_t, 0, "Integrative gain for  joint 1", 1, 0, 10)
gen.add("joint2_i", double_t, 0, "Integrative gain for  joint 2", 1, 0, 10)
gen.add("joint3_i", double_t, 0, "Integrative gain for  joint 3", 1, 0, 10)
gen.add("joint4_i", double_t, 0, "Integrative gain for  joint 4", 1, 0, 10)
gen.add("joint5_i", double_t, 0, "Integrative gain for  joint 5", 1, 0, 10)
gen.add("joint6_i", double_t, 0, "Integrative gain for  joint 6", 1, 0, 10)
gen.add("joint7_i", double_t, 0, "Integrative gain for  joint 7", 1, 0, 10)
gen.add("i_clamp", double_t, 0, "Integrative saturation limit", 100, 0, 200)

exit(gen.generate(PACKAGE, "smalldrop_robot_arm", "JointPositionPIDSimController"))